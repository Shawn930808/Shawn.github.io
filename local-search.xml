<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CV学习笔记Week1：初阶计算机视觉（图像处理）</title>
    <link href="/2020/06/14/CV%20learning%20notes%20Week1%EF%BC%9Aprimary%20computer%20vision(The%20image%20processing)/"/>
    <url>/2020/06/14/CV%20learning%20notes%20Week1%EF%BC%9Aprimary%20computer%20vision(The%20image%20processing)/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Computer-Vision-介绍"><a href="#1-Computer-Vision-介绍" class="headerlink" title="1. Computer Vision 介绍"></a>1. Computer Vision 介绍</h1><h2 id="1-1-计算机视觉的由来"><a href="#1-1-计算机视觉的由来" class="headerlink" title="1.1. 计算机视觉的由来"></a>1.1. 计算机视觉的由来</h2><p><strong>什么是计算机视觉 :</strong><br>    自动化的完成图像的采集，==决策==，处理，保存，显示的过程—&gt;像人的视觉一样，看到并==决策==。<br><strong>自动处理（auto-ps）:</strong></p><ul><li>找到人脸位置——&gt;人脸检测算法（==分类算法==）</li></ul><ul><li>定位五官具体位置——&gt;人脸关键点检测算法</li><li>磨皮—&gt;Blue 模糊，高斯滤波，<br>瘦脸，大眼—&gt;仿射变换<br>口红，白牙—&gt;色彩变换</li></ul><p> <strong>主要应用 :</strong></p><ul><li><p>分类—&gt;N分类</p></li><li><p>检测—&gt;遍历</p></li><li><p>分割—&gt;车道线分割</p></li><li><p>视频处理</p><h1 id="2-计算机如何看到图像"><a href="#2-计算机如何看到图像" class="headerlink" title="2. 计算机如何看到图像"></a>2. 计算机如何看到图像</h1><h2 id="2-1-相关硬件"><a href="#2-1-相关硬件" class="headerlink" title="2.1. 相关硬件"></a>2.1. 相关硬件</h2></li><li><p>感光器件与感光传感器—&gt;采集方式</p></li><li><p>显像管与显示屏—&gt;显示方式</p><h2 id="2-2-图像类型"><a href="#2-2-图像类型" class="headerlink" title="2.2. 图像类型"></a>2.2. 图像类型</h2></li><li><p>二值图像<br><img src="https://img-blog.csdnimg.cn/20200615104028746.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_4,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p></li><li><p>灰度图像<br><img src="https://img-blog.csdnimg.cn/20200615105254645.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_4,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p></li><li><p>RGB彩色图像：（3个Channel）<br><img src="https://img-blog.csdnimg.cn/20200615105516690.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h2 id="2-3-图像存储"><a href="#2-3-图像存储" class="headerlink" title="2.3. 图像存储"></a>2.3. 图像存储</h2><p>图像是以数字矩阵的形式存储<br><img src="https://img-blog.csdnimg.cn/20200615115543592.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h1 id="3-计算机处理图像的方式和方法"><a href="#3-计算机处理图像的方式和方法" class="headerlink" title="3. 计算机处理图像的方式和方法"></a>3. 计算机处理图像的方式和方法</h1></li></ul><blockquote><p>本部分相关代码可在github中查看下载<a href="https://github.com/Shawn930808/Computer-vision.git" target="_blank" rel="noopener">https://github.com/Shawn930808/Computer-vision.git</a></p></blockquote><p>首先要导入各种需要使用的工具包</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</code></pre></div><p>matplotlib需要提前安装</p><div class="hljs"><pre><code class="hljs powershell">!pip install matplotlib <span class="hljs-literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</code></pre></div><h2 id="3-1-获取图像矩阵的方式"><a href="#3-1-获取图像矩阵的方式" class="headerlink" title="3.1. 获取图像矩阵的方式"></a>3.1. 获取图像矩阵的方式</h2><ul><li>直接从camera 读取：<div class="hljs"><pre><code class="hljs python">cap = cv2.VideoCapture(<span class="hljs-number">0</span>)<span class="hljs-comment">#打开摄像头</span>print(cap.isOpened())<span class="hljs-comment">#判断摄像头是否打开</span>return_value,frame = cap.read()<span class="hljs-comment">#读取摄像头的图像传给frame</span></code></pre></div></li><li>从文件读取<div class="hljs"><pre><code class="hljs powershell">cap = cv2.VideoCapture(<span class="hljs-string">"../How Computer Vision Works.mp4"</span>)</code></pre></div></li><li>自己生成一个图像矩阵<div class="hljs"><pre><code class="hljs python">img0 = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]])<span class="hljs-comment">#查看矩阵数值以及大小</span>print(img0)print(img0.shape)print(<span class="hljs-string">"img0 size = %s,%s"</span>%(img0.shape[<span class="hljs-number">0</span>],img0.shape[<span class="hljs-number">1</span>]))</code></pre></div><h2 id="3-2-三种图像格式"><a href="#3-2-三种图像格式" class="headerlink" title="3.2. 三种图像格式"></a>3.2. 三种图像格式</h2></li><li>BGR: 绿蓝红<br>使用cv2.imread()接口读图像，读进来的是BGR格式以及【0～255】,所以要将img转换为RGB或者HSV格式显示<br>格式转换函数：cv2.cvtClolor(a,b)<br>其中：<br>a：读取到的BGR图像<div class="hljs"><pre><code>b：cv2.COLOR_BGR2RGB  将BGR转为RGB      cv2.COLOR_BGR2HSV  将BGR转为HSV</code></pre></div><div class="hljs"><pre><code class="hljs python">img_BGR= cv2.imread(<span class="hljs-string">'lena.jpg'</span>)plt.imshow(img_BGR)</code></pre></div></li><li>RGB: 红蓝绿<div class="hljs"><pre><code class="hljs python">img_RGB = cv2.cvtColor(img_BGR, cv2.COLOR_BGR2RGB)print(img_RGB.shape)plt.imshow(img_RGB)</code></pre></div></li><li>HSV：<br>H：色调  min(RGB)<br>S：饱和度 (max-min)/max<br>V：明度  max(RGB)</li></ul><div class="hljs"><pre><code class="hljs python">img_HSV = cv2.cvtColor(img_BGR, cv2.COLOR_BGR2HSV)print(img_HSV.shape)plt.imshow(img_HSV)</code></pre></div><h2 id="3-3-移动，旋转，拉伸-放缩"><a href="#3-3-移动，旋转，拉伸-放缩" class="headerlink" title="3.3. 移动，旋转，拉伸, 放缩"></a>3.3. 移动，旋转，拉伸, 放缩</h2><ul><li>平移</li></ul><p> 1.首先定义一个变换矩阵M<br>$$M=<br> \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; tx \<br>   0 &amp; 1 &amp; ty<br>  \end{matrix}<br>  \right] \tag{1}<br>$$<br>2.由图像的坐标xy生成一个矩阵Image=[x, y, 1] ,Image^T^ 为<br>$$<br> \left[<br> \begin{matrix}<br>   x\<br>    y \<br>   1<br>  \end{matrix}<br>  \right] \tag{2}<br>$$</p><p>3.用M乘以这个矩阵的转置，得到平移后的坐标<br>M*Image^T^ ={x+Tx,y+Ty}</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#图像的移动</span>M = np.float32([[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">300</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">200</span>]]) <span class="hljs-comment">#定义一个变换矩阵M（平移的变换矩阵）</span>image_1 = cv2.warpAffine(img,M,(<span class="hljs-number">1000</span> ,<span class="hljs-number">1000</span>))<span class="hljs-comment">#将img按照变换矩阵M进行移动（）</span>plt.imshow(image_1)print(image_1[<span class="hljs-number">200</span>,<span class="hljs-number">300</span>])</code></pre></div><ul><li>旋转<br>变换矩阵定义为：<br>$$M=<br>\left[<br>\begin{matrix}<br>cosθ &amp; -sinθ&amp; tx \<br>sinθ &amp; cosθ &amp; ty<br>\end{matrix}<br>\right] \tag{3}<br>$$</li></ul><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#旋转角度</span>theta=<span class="hljs-number">0.5</span><span class="hljs-comment">#旋转的变换矩阵M</span>M = np.float32([[np.cos(theta),-np.sin(theta),<span class="hljs-number">100</span>],[np.sin(theta),np.cos(theta),<span class="hljs-number">200</span>]])<span class="hljs-comment">#定义旋转轴的坐标</span>cols = <span class="hljs-number">800</span>rows = <span class="hljs-number">900</span><span class="hljs-comment">#根据旋转的变换矩阵，以（800，900）为轴，对image进行旋转</span>image_2 = cv2.warpAffine(img,M,(cols,rows))plt.imshow(image_2)print(image_2.shape)</code></pre></div><p>变换矩阵自动生成：可以定义初始位置和变换后的位置，自动生成变换矩阵：M = cv2.getAffineTransform(pts1,pts2)</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># 初始位置的三个顶点坐标</span>pts1 = np.float32([[<span class="hljs-number">50</span>,<span class="hljs-number">50</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">50</span>],[<span class="hljs-number">50</span>,<span class="hljs-number">200</span>]])<span class="hljs-comment"># 变换后的三个顶点坐标</span>pts2 = np.float32([[<span class="hljs-number">10</span>,<span class="hljs-number">100</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">50</span>],[<span class="hljs-number">100</span>,<span class="hljs-number">250</span>]])M = cv2.getAffineTransform(pts1,pts2) <span class="hljs-comment"># 自动生成M</span>print(M)</code></pre></div><ul><li>拉伸(warpPerspective)</li></ul><p>获得拉伸的变换矩阵的函数:getPerspectiveTransform(pts1,pts2)</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment">#拉伸</span>pts1 = np.float32([[<span class="hljs-number">56</span>,<span class="hljs-number">65</span>],[<span class="hljs-number">368</span>,<span class="hljs-number">52</span>],[<span class="hljs-number">28</span>,<span class="hljs-number">387</span>],[<span class="hljs-number">389</span>,<span class="hljs-number">390</span>]])pts2 = np.float32([[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">100</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">300</span>],[<span class="hljs-number">300</span>,<span class="hljs-number">300</span>]])M = cv2.getPerspectiveTransform(pts1,pts2)print(M)<span class="hljs-comment"># 拉伸变换后者透视变换</span>dst = cv2.warpPerspective(img,M,(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>))plt.imshow(dst)</code></pre></div><ul><li>放缩<br>放缩的变换矩阵为<br>$$M=<br>\left[<br>\begin{matrix}<br>a&amp; 0 &amp; 0 \<br>0 &amp; b &amp; 0<br>\end{matrix}<br>\right] \tag{1}<br>$$<br>M*Image^T^ =[ax，by]</li></ul><div class="hljs"><pre><code class="hljs python">img =  cv2.imread(<span class="hljs-string">'lena.jpg'</span>)img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)img =cv2.resize(img,(<span class="hljs-number">500</span>,<span class="hljs-number">300</span>))plt.imshow(img)img.shape</code></pre></div><h2 id="3-3-滤波（去噪，模糊，锐化）"><a href="#3-3-滤波（去噪，模糊，锐化）" class="headerlink" title="3.3. 滤波（去噪，模糊，锐化）"></a>3.3. 滤波（去噪，模糊，锐化）</h2><p>主要有四种滤波：</p><ul><li><p>高斯滤波（去噪）（针对符合正态分布的噪声）<br>用于去除高斯噪声，一般有两种方式实现<br>1: 离散化窗口滑窗卷积<br>2: 傅里叶变换<br>通常使用滑窗卷积<img src="https://img-blog.csdnimg.cn/20200620091052415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>一维高斯分布：<br><img src="https://img-blog.csdnimg.cn/20200622131516533.png" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>  二维高斯分布<br><img src="https://img-blog.csdnimg.cn/20200622131648547.png" srcset="/img/loading.gif" alt="在这里插入图片描述"></p></li></ul><div class="hljs"><pre><code class="hljs python">img= cv2.GaussianBlur(img, (<span class="hljs-number">11</span>, <span class="hljs-number">11</span>), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 高斯模糊</span></code></pre></div><blockquote><p>边缘检测<br>cv2.Canny(pil_img3,30,150)</p></blockquote><div class="hljs"><pre><code class="hljs python">kernel = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),np.float32)/<span class="hljs-number">8</span> <span class="hljs-comment">#求卷积核</span>result = cv2.filter2D(img,<span class="hljs-number">-1</span>,kernel)<span class="hljs-comment">#图像滤波\卷积</span></code></pre></div><ul><li>中值滤波<br>中值滤波用测试像素周围邻域像素集中的中值代替原像素。中值滤波去除椒盐噪声和斑块噪声时，效果非常明显。在OpenCV中，可以使用函数medianBlur进行操作</li><li>均值滤波</li><li>双边滤波</li></ul><div class="hljs"><pre><code class="hljs python">img_bf = cv2.bilateralFilter(image_homework, <span class="hljs-number">47</span>, <span class="hljs-number">75</span>, <span class="hljs-number">75</span>)</code></pre></div><ul><li>添加水印</li></ul><div class="hljs"><pre><code class="hljs python">wm = cv2.imread(<span class="hljs-string">"water1.png"</span>)wm = cv2.resize(wm,(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>))wm = <span class="hljs-number">255</span>-wmimg1 = cv2.resize(img,(<span class="hljs-number">300</span>,<span class="hljs-number">300</span>))<span class="hljs-comment">#img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)</span>print(wm.shape)plt.imshow(cv2.add(wm,img1))plt.imshow(cv2.addWeighted(wm,<span class="hljs-number">0.9</span>,img1,<span class="hljs-number">0.5</span>,<span class="hljs-number">0</span>))</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
      <tag>NOTE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo在Github上部署自己的个人网站</title>
    <link href="/2020/06/14/Use%20hexo%20build%20Blog%20in%20the%20github/"/>
    <url>/2020/06/14/Use%20hexo%20build%20Blog%20in%20the%20github/</url>
    
    <content type="html"><![CDATA[<h1 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1. 安装Homebrew"></a>1. 安装Homebrew</h1><ul><li>1.安装</li></ul><div class="hljs"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> /bin/zsh <span class="hljs-literal">-c</span> <span class="hljs-string">"<span class="hljs-variable">$</span>(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"</span></code></pre></div><ul><li><p>2.测试</p><div class="hljs"><pre><code class="hljs armasm">$ <span class="hljs-keyword">brew </span>ls   本地软件库$ <span class="hljs-keyword">brew </span>-v   查看<span class="hljs-keyword">brew版本</span></code></pre></div><h1 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h1></li><li><p>1.安装</p><div class="hljs"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git</code></pre></div></li><li><p>2.测试</p><div class="hljs"><pre><code class="hljs applescript">$ git <span class="hljs-built_in">version</span></code></pre></div><h1 id="3-安装-Node-js"><a href="#3-安装-Node-js" class="headerlink" title="3. 安装 Node.js"></a>3. 安装 Node.js</h1></li><li><p>1.安装</p><div class="hljs"><pre><code class="hljs crmsh">$ brew install <span class="hljs-keyword">node</span><span class="hljs-title"></span></code></pre></div></li><li><p>2.测试</p><div class="hljs"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>$ npm -v</code></pre></div></li><li><p>3.更新</p><div class="hljs"><pre><code class="hljs crmsh">//单独运行$ brew update$ brew upgrade <span class="hljs-keyword">node</span><span class="hljs-title"></span><span class="hljs-title">$</span> npm install -g npm//一条运行$ brew update &amp;&amp; brew upgrade <span class="hljs-keyword">node</span> <span class="hljs-title">&amp;&amp; npm</span> install -g npm</code></pre></div><h1 id="4-安装-hexo"><a href="#4-安装-hexo" class="headerlink" title="4. 安装 hexo"></a>4. 安装 hexo</h1></li><li><p>1.安装</p><div class="hljs"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></div><h6 id="初始化：本地建一个文件夹Hexo，cd命令进入目录，执行以下命令"><a href="#初始化：本地建一个文件夹Hexo，cd命令进入目录，执行以下命令" class="headerlink" title="初始化：本地建一个文件夹Hexo，cd命令进入目录，执行以下命令"></a>初始化：本地建一个文件夹Hexo，cd命令进入目录，执行以下命令</h6><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<span class="hljs-variable">$ </span>npm install</code></pre></div></li><li><p>2.本地启动</p><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<span class="hljs-variable">$ </span>hexo s</code></pre></div></li><li><p>3.修改主题<br>将主题clone到themes文件夹，打开hexo的主目录下的_config.yml文件，找到theme，将值改为主题的名字：</p><div class="hljs"><pre><code class="hljs autoit">theme: <span class="hljs-keyword">next</span></code></pre></div><h1 id="4-注册Github，并新建一个仓库（repository）"><a href="#4-注册Github，并新建一个仓库（repository）" class="headerlink" title="4. 注册Github，并新建一个仓库（repository）"></a>4. 注册Github，并新建一个仓库（repository）</h1></li><li><p>创建repository：注意名字必须跟前面自己的用户名相同</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200614152847592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70#pic_center" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h1 id="5-配置SSH"><a href="#5-配置SSH" class="headerlink" title="5. 配置SSH"></a>5. 配置SSH</h1><ul><li><ol><li>生成一个SSH：通过以下命令生成一个ssh_key.pub<br><img src="https://img-blog.csdnimg.cn/20200614152816825.png#pic_center" srcset="/img/loading.gif" alt="在这里插入图片描述"><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C 你的邮箱</code></pre></div></li></ol></li><li><p>2.点击Github头像，选择settings-&gt;SSH and GPG keys<br>  复制ssh_key.pub里的内容，填进ssh.<br>  <img src="https://img-blog.csdnimg.cn/20200614152736724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200614152736721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200614152736657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNTYyNzAzMw==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p></li></ul><h1 id="6-将本地内容部署到Github"><a href="#6-将本地内容部署到Github" class="headerlink" title="6. 将本地内容部署到Github"></a>6. 将本地内容部署到Github</h1><ul><li><p>使用以下命令验证是否与Github链接</p><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com</code></pre></div></li><li><p>配置账号</p><div class="hljs"><pre><code class="hljs routeros">$ git<span class="hljs-built_in"> config </span>--global user.name you username$ git<span class="hljs-built_in"> config </span>--global user.email you email</code></pre></div></li><li><p>安装github部署插件</p></li></ul><div class="hljs"><pre><code class="hljs sql">$ npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></div><ul><li>打开_config.yml文件，在最底部修改部署配置，注意严格的空格</li></ul><div class="hljs"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><span class="hljs-symbol">deploy:</span><span class="hljs-symbol">  type:</span> git<span class="hljs-symbol">  repository:</span> http:<span class="hljs-comment">//github.com/Shawn930808/Shawn930808.github.io.git</span><span class="hljs-symbol">  branch:</span> master</code></pre></div><ul><li>保存后在终端执行以下命令</li></ul><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<span class="hljs-variable">$ </span>hexo g<span class="hljs-variable">$ </span>hexo d</code></pre></div><p>到此为止，自己的个人网站就成功搭建并部署到Github上了，接下来就可以通过<a href="Shawn930808.github.io">Shawn930808.github.io</a>这个网址访问自己的网站了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
